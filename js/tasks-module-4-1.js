// ОСНОВИ
// Створення об'єкта: Створіть об'єкт person, який містить властивості ім'я, вік та професія.

// Доступ до властивостей: Виведіть на консоль ім'я створеного об'єкта person.

// Зміна властивостей: Змініть вік в об'єкті person на нове значення.

// Додавання нових властивостей: Додайте до об'єкта person властивість місце_роботи зі значенням.

// Видалення властивостей: Видаліть властивість професія з об'єкта person.

// Пошук властивостей: Перевірте, чи існує властивість професія в об'єкті person.

// Зведення декількох об'єктів: Створіть ще один об'єкт friend, який містить інформацію про вашого друга. Потім об'єднайте властивості об'єкта friend з об'єктом person.

// Перебір властивостей: Виведіть всі властивості об'єкта person на консоль у вигляді ключ-значення.

// Методи об'єкта: Додайте до об'єкта person метод привітання, який буде виводити вітання з іменем особи.

// Застосування Object.keys(): Виведіть на консоль масив зі всіма ключами об'єкта person за допомогою функції Object.keys().

// Напиши функцію, яка створює об'єкт з ім'ям і віком.
// Функція повинна приймати два аргументи: ім'я (рядок) і вік (число).
// Поверни цей об'єкт.

// Напиши функцію, яка приймає об'єкт і додає до нього нову властивість "address" (рядок).
// Поверни оновлений об'єкт.

// Напиши функцію, яка приймає об'єкт і новий вік.
// Функція повинна змінити значення властивості "age" в об'єкті на нове значення.
// Поверни оновлений об'єкт.

// Напиши функцію, яка приймає об'єкт і видаляє з нього властивість "age".
// Поверни оновлений об'єкт.

// Напиши функцію, яка приймає об'єкт і повертає значення властивості "name".

// Напиши функцію, яка приймає об'єкт і повертає true, якщо властивість "address" існує в об'єкті, і false, якщо ні.

// Напиши функцію, яка приймає два об'єкти і об'єднує їх в один.
// Якщо у об'єктів є однакові властивості, значення другого об'єкта мають замінити значення першого.
// Поверни результат

// Напиши функцію, яка створює об'єкт з трьома властивостями: ім'ям, віком і адресою.
// Якщо ім'я та вік не передані, встанови їх значення за замовчуванням ("Unknown", 0 відповідно).
// Поверни об'єкт.

// Напиши функцію, яка приймає об'єкт та нові значення для імені та віку. 
// Функція повинна змінити обидві властивості в об'єкті. Поверни оновлений об'єкт.

// Напиши функцію, яка приймає об'єкт та нову властивість "email" (якщо її немає).
// Якщо в об'єкті вже є "email", нічого не роби.
// Поверни оновлений об'єкт.

// Напиши функцію, яка приймає об'єкт і змінює тип значення властивості "age" з числа на рядок.
// Поверни оновлений об'єкт.

// Напиши функцію, яка приймає об'єкт і змінює значення властивості "address", але тільки якщо ця властивість вже існує.
// Якщо її немає, поверни об'єкт без змін.

// Напиши функцію, яка приймає об'єкт користувача з властивостями name та сity. 
// Та повертає рядок "User {імя користувача} from {місто користувача}!"

// Напиши функцію, яка приймає масив з ключами і значеннями (наприклад, [["name", "John"], ["age", 25],
// ["address", "123 Street"]]) і створює об'єкт з цих пар. Поверни об'єкт.

// Напиши функцію, яка приймає масив об'єктів і змінює в кожному з них властивість "age", збільшуючи її на 1. 
// Поверни оновлений масив об'єктів.


// Створіть об'єкт contactBook, який зберігатиме список контактів та надаватиме методи для додавання, видалення та пошуку контактів.

// Створіть об'єкт rectangle, який представлятиме прямокутник з методами для обчислення його площі та периметра. 
// Об'єкт повинен приймати довжини двох сторін під час створення.

// Створіть об'єкт toDoList, який зберігатиме список задач та надаватиме методи для додавання нових завдань, 
// позначки задачі як виконаної та виведення списку завдань.

// Створіть об'єкт bankAccount, який представлятиме банківський рахунок із методами для депозиту, зняття коштів та перевірки балансу.
//  Врахуйте обробку можливих помилок (наприклад, недостатньо коштів).

//  Створіть об'єкт libraryCatalog, який зберігатиме список книг у бібліотеці та надаватиме методи для додавання нових книг, 
//  пошуку книг за автором та ISBN, а також виведення списку всіх книг.

//  Створіть об'єкт temperatureConverter, який матиме методи для конвертації температур між градусами Цельсія та Фаренгейта.

//  Створіть об'єкт shoppingCart, який зберігатиме список товарів та надаватиме методи для додавання товарів, 
//  підрахунку загальної вартості та виведення списку товарів.

//  Створіть об'єкт socialNetworkUser, який представляє користувача соціальної мережі з полями username, friends (список друзів)
//   та методами для додавання та видалення друзів, а також виведення списку друзів.

//   Створіть об'єкт musicPlayer, який зберігатиме список пісень та надаватиме методи для додавання нових пісень, 
//   відтворення, паузи та перемикання між піснями.

//   Створіть об'єкт myString, який буде мати наступні методи: метод reverse(), який параметром приймає рядок, 
//   а повертає його в перевернутому вигляді; метод ucFirst(), який параметром приймає рядок, а повертає цей же рядок, 
//   зробивши його першу літеру заголовною; і метод ucWords(), який приймає рядок і робить заголовною першу літеру кожного слова цього рядка.

//   Створіть об'єкт validator, який перевірятиме рядки. Наприклад, у нього буде метод isEmail, що параметром приймає рядок і перевіряє, 
//   чи є він коректним емейлом чи ні. Якщо є – повертає true, якщо не є – то false. Крім того, об'єкт буде мати такі методи:
//    метод isDomain для перевірки домену, метод isDate для перевірки дати і метод isPhone для перевірки телефону.